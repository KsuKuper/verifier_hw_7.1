{
	"info": {
		"_postman_id": "59996068-7849-4b94-b405-20735ad6d90f",
		"name": "verifier_hw_7.1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "20300544-59996068-7849-4b94-b405-20735ad6d90f"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fe406eae-3643-4505-8b48-885672b1d26b",
						"exec": [
							"let jsonBody = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response body contains id_token\", function () {",
							"    pm.expect(jsonBody).to.have.property(\"id_token\");",
							"    pm.collectionVariables.set(\"id_token\", jsonBody.id_token);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "12f9a43a-cdc1-4c30-865e-7d59f8eef582",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{id_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json, text/plain, */*"
					},
					{
						"key": "Accept-Language",
						"value": "en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,fr-FR;q=0.6,fr;q=0.5,de-DE;q=0.4,de;q=0.3,ru;q=0.2"
					},
					{
						"key": "Connection",
						"value": "keep-alive"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Origin",
						"value": "https://sqlverifier-50d286d70656.herokuapp.com"
					},
					{
						"key": "Referer",
						"value": "https://sqlverifier-50d286d70656.herokuapp.com/login"
					},
					{
						"key": "Sec-Fetch-Dest",
						"value": "empty"
					},
					{
						"key": "Sec-Fetch-Mode",
						"value": "cors"
					},
					{
						"key": "Sec-Fetch-Site",
						"value": "same-origin"
					},
					{
						"key": "User-Agent",
						"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "sec-ch-ua-platform",
						"value": "\"macOS\""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{adminLogin}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"rememberMe\": false\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/authenticate",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"authenticate"
					]
				}
			},
			"response": []
		},
		{
			"name": "create a task",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c76c676d-2028-4939-897d-60c6a1364ee7",
						"exec": [
							"let jsonBody = pm.response.json();",
							"",
							"pm.collectionVariables.get(\"id_token\", jsonBody.id_token);",
							"pm.collectionVariables.set(\"id\", jsonBody.id);",
							"",
							"pm.test(\"Response body is not empty\", function () {",
							"  const responseBody = pm.response.text();",
							"  pm.expect(responseBody).to.exist.and.to.not.be.empty;",
							"});",
							"pm.test(\"Response body is in JSON format\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"json\");",
							"});",
							"pm.test(\"Response headers contain the expected content type\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Response status code is 201\", function () {",
							"  pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Status code name is 'Created'\", function () {",
							"    pm.response.to.have.status(\"Created\");",
							"});",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('id').that.is.a('number');",
							"  pm.expect(responseData).to.have.property('text').that.is.a('string');",
							"  pm.expect(responseData).to.have.property('answer').that.is.a('string');",
							"  pm.expect(responseData).to.have.property('title').that.is.a('string');",
							"});",
							"",
							"pm.test(\"ID is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.id).to.be.at.least(0);",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "e97472fa-189d-42ed-ae32-b58c284b16aa",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{id_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{id_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"text\": \"some text\",\n  \"answer\": \"string\",\n  \"title\": \"string\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/tasks",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "get tasks list",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7860f84a-cf3b-40e9-9536-01d20524178e",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array of objects\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
							"    jsonData.forEach(function(task) {",
							"        pm.expect(task).to.be.an('object').that.has.all.keys('id', 'text', 'answer', 'title');",
							"    });",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"pm.test(\"Each task object has a non-negative integer ID\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(task) {",
							"        pm.expect(task.id).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "05dc99bb-39ff-4339-87d5-01ad8758bf24",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{id_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Authorization",
						"value": "{{id_token}}"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/api/tasks?page=0&size=300",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"tasks"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "300"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "change task text",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c179e9aa-b53f-4b87-bfe3-1ca842416164",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an object with id, text, answer, and title properties\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('id', 'text', 'answer', 'title');",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"pm.test(\"Id is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Text and title are non-empty strings\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.text).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Text should not be empty\");",
							"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Answer is a non-empty string or null\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.answer).to.satisfy((answer) => {",
							"        return typeof answer === 'string' || answer === null;",
							"    }, \"Answer should be a non-empty string or null\");",
							"});",
							"",
							"",
							"pm.test(\"No unexpected properties in the response body\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(Object.keys(responseData)).to.have.lengthOf(4);",
							"});",
							"",
							"",
							"pm.test(\"Id property should be unique and not repeated\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.id).to.not.equal(pm.iterationData.get(\"previousId\"), \"Id should be unique\");",
							"    pm.iterationData.set(\"previousId\", responseData.id);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "870b8b7b-28a5-4116-a941-99ea6bc8373b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{id_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{id_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": {{id}},\n  \"text\": \"some new new text\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/tasks/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"tasks",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get task data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7bc2e106-5ba1-41de-bd8d-32ec15ca7fe2",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is a valid JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response body has id, text, answer, and title properties\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('text');",
							"    pm.expect(responseData).to.have.property('answer');",
							"    pm.expect(responseData).to.have.property('title');",
							"});",
							"",
							"pm.sendRequest({",
							"    url: \"http://localhost:8080/api/tasks/1275\",",
							"    method: \"DELETE\",",
							"    header: {",
							"        Authorization: \"Bearer\" + pm.collectionVariables.get('token'),",
							"        accept: \"*/*\"",
							"    }",
							"    , function (err, response){",
							"    console.log(response.json);",
							"    }",
							"}); // нужен коммент о правильности, так как не удаляется таска",
							"",
							"pm.collectionVariables.unset('id');",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "17a784e7-8a9b-495a-9fb7-3680152ecb0b",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "dfbaca78-ec6a-495f-ad89-44a1517a90ae",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{id_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/api/tasks/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"tasks",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "507c4fec-f5a7-4c7c-8f21-d266fd0acd7a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "1a581e40-40e8-40a9-aedd-abbf85bd5acd",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "eed1748c-759d-464f-a531-dffcffb93fe8",
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"id": "8e449fbe-bc19-46ed-939e-57fe36b06b61",
			"key": "adminLogin",
			"value": "admin",
			"type": "string"
		},
		{
			"id": "0505058a-cb1b-490d-98ff-9b1cbfe31804",
			"key": "adminPassword",
			"value": "admin",
			"type": "string"
		},
		{
			"id": "0e7672f2-4fc8-4c95-8844-59e593c98612",
			"key": "id_token",
			"value": "{{id_token}}",
			"type": "string"
		}
	]
}