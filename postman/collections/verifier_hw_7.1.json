{
	"info": {
		"_postman_id": "10cbc8f9-6c42-42c4-89fe-caf2907ffa28",
		"name": "verifier_hw_7.1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "20300544-10cbc8f9-6c42-42c4-89fe-caf2907ffa28"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8970e53b-8b81-4734-bce1-89c67db32643",
						"exec": [
							"let moment = require('moment');",
							"let currentTime = moment();",
							"console.log(currentTime);",
							"",
							"pm.test(\"Response time is equal to current time\", function () {",
							"  let responseHeaderDate = moment(pm.response.headers[Date]);",
							"  console.log(responseHeaderDate);",
							"  pm.expect(moment(responseHeaderDate).isAfter(currentTime)).to.be.true;",
							"",
							"  let jsonBody = pm.response.json();",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response body contains id_token\", function () {",
							"    pm.expect(jsonBody).to.have.property(\"id_token\");",
							"    pm.collectionVariables.set(\"id_token\", jsonBody.id_token);",
							"});",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "79ceaf72-fa93-4fcc-9c15-1c4a97907375",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json, text/plain, */*"
					},
					{
						"key": "Accept-Language",
						"value": "en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,fr-FR;q=0.6,fr;q=0.5,de-DE;q=0.4,de;q=0.3,ru;q=0.2"
					},
					{
						"key": "Connection",
						"value": "keep-alive"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Origin",
						"value": "https://sqlverifier-50d286d70656.herokuapp.com"
					},
					{
						"key": "Referer",
						"value": "https://sqlverifier-50d286d70656.herokuapp.com/login"
					},
					{
						"key": "Sec-Fetch-Dest",
						"value": "empty"
					},
					{
						"key": "Sec-Fetch-Mode",
						"value": "cors"
					},
					{
						"key": "Sec-Fetch-Site",
						"value": "same-origin"
					},
					{
						"key": "User-Agent",
						"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "sec-ch-ua-platform",
						"value": "\"macOS\""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{adminLogin}}\",\n    \"password\": \"{{adminPassword}}\",\n    \"rememberMe\": false\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/authenticate",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"authenticate"
					]
				}
			},
			"response": []
		},
		{
			"name": "create a task",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9d5790a3-d6bd-44e1-adf9-b8488a445d6b",
						"exec": [
							"pm.sendRequest(pm.collectionVariables.get('baseUrl') + '/api/tasks?page=0&size=300', function (err, response) {",
							"    console.log(response.json());",
							"let template = `",
							"<style type=\"text/css\">",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
							"    .tftable tr {background-color:#ffffff;}",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
							"    .tftable tr:hover {background-color:#e0ffff;}",
							"</style>",
							"",
							"<table class=\"tftable\" border=\"1\">",
							"    <tr>",
							"        <th>ID</th>",
							"        <th>Text</th>",
							"        <th>Answer</th>",
							"        <th>Title</th>",
							"    </tr>",
							"    <tr>",
							"        <td>{{response.id}}</td>",
							"        <td>{{response.text}}</td>",
							"        <td>{{response.answer}}</td>",
							"        <td>{{response.title}}</td>",
							"    </tr>",
							"</table>",
							"`;",
							"",
							"function constructVisualizerPayload() {",
							"    return {response: pm.response.json([])}",
							"}",
							"",
							"pm.visualizer.set(template, constructVisualizerPayload());",
							"});",
							"",
							"let jsonBody = pm.response.json();",
							"",
							"pm.collectionVariables.set(\"id\", jsonBody.id);",
							"",
							"pm.test(\"Response status code is 201\", function () {",
							"  pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Response has required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('id').that.is.a('number');",
							"  pm.expect(responseData).to.have.property('text').that.is.a('string');",
							"  pm.expect(responseData).to.have.property('answer').that.is.a('string');",
							"  pm.expect(responseData).to.have.property('title').that.is.a('string');",
							"});",
							"pm.test(\"ID is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
							"  pm.expect(responseData.id).to.be.at.least(0);",
							"});",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "3fdd972d-cb4a-4286-b222-a551d0e1537b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{id_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{id_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"text\": \"some text\",\n  \"answer\": \"string\",\n  \"title\": \"string\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/tasks",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "change task text",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "47ee3ace-54d3-433c-9d5a-d51ac4291517",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an object with id, text, answer, and title properties\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('id', 'text', 'answer', 'title');",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"pm.test(\"Id is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"pm.test(\"Text and title are non-empty strings\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.text).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Text should not be empty\");",
							"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
							"});",
							"",
							"pm.test(\"Answer is a non-empty string or null\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.answer).to.satisfy((answer) => {",
							"        return typeof answer === 'string' || answer === null;",
							"    }, \"Answer should be a non-empty string or null\");",
							"});",
							"",
							"pm.test(\"No unexpected properties in the response body\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(Object.keys(responseData)).to.have.lengthOf(4);",
							"});",
							"",
							"pm.test(\"Id property should be unique and not repeated\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.id).to.not.equal(pm.iterationData.get(\"previousId\"), \"Id should be unique\");",
							"    pm.iterationData.set(\"previousId\", responseData.id);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "8161acfd-61d8-4e45-b6ee-ff7a205fee9f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{id_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{id_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": {{id}},\n  \"text\": \"some new new text\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/tasks/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"tasks",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get task data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2936b00d-ff21-4b14-ae7c-9061154470a3",
						"exec": [
							"pm.sendRequest({",
							"    url: `${pm.collectionVariables.get('baseUrl')}/api/tasks/${pm.collectionVariables.get('id')}`,",
							"    method: \"DELETE\",",
							"    header: {",
							"        \"Authorization\": \"Bearer \" + pm.collectionVariables.get('id_token'),",
							"        \"Accept\": \"*/*\"",
							"    }",
							"}, function (err, response) {",
							"    pm.test(\"Response status code is 200\", function () {",
							"        pm.response.to.have.status(200);",
							"    });",
							"",
							"    pm.test(\"Response is a valid JSON\", function () {",
							"        pm.response.to.be.json;",
							"    });",
							"",
							"    pm.test(\"Response body has id, text, answer, and title properties\", function () {",
							"        const responseData = pm.response.json();",
							"        pm.expect(responseData).to.have.property('id');",
							"        pm.expect(responseData).to.have.property('text');",
							"        pm.expect(responseData).to.have.property('answer');",
							"        pm.expect(responseData).to.have.property('title');",
							"    });",
							"});",
							"",
							"pm.collectionVariables.unset(\"id\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "541dbd30-5ff1-46d3-8154-43e20eef7fb8",
						"exec": [
							"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {",
							"    console.log(response.json());",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "4a7eacb3-70ad-49d6-9c1d-475f433d578f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{id_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/api/tasks/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"tasks",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get tasks list",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3219598b-59dc-40a7-a1f2-f29db54d5aea",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array of objects\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
							"    jsonData.forEach(function(task) {",
							"        pm.expect(task).to.be.an('object').that.has.all.keys('id', 'text', 'answer', 'title');",
							"    });",
							"});",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"pm.test(\"Each task object has a non-negative integer ID\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(task) {",
							"        pm.expect(task.id).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "d0332cff-f7d1-4371-915e-fbb676a2ad59",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{id_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Authorization",
						"value": "{{id_token}}"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/api/tasks?page=0&size=300",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"tasks"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "300"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "048ad886-d144-4fda-a5cf-2d07d5ce031a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "a6cb3c4b-f023-40c6-ba6b-61d85f8bfd0e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "7ddd1375-cc52-4fe3-a484-b683593c4cd4",
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"id": "84cd47ca-5cd0-419e-a178-5e4879727ab0",
			"key": "adminLogin",
			"value": "admin",
			"type": "string"
		},
		{
			"id": "75c68786-8985-44b3-9d79-e81d9b56e0c4",
			"key": "adminPassword",
			"value": "admin",
			"type": "string"
		},
		{
			"id": "abe8838d-e1e7-4ad7-bfb7-6d287fb96d7a",
			"key": "id_token",
			"value": "{{id_token}}",
			"type": "string"
		}
	]
}